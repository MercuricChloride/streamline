Ç
mapsomething_else*
Erc721.TransferArraySomethingElseArray*ƒ€
maptransfero
m"k
SomethingElse
from*

transferfrom
to*

transferto"
tokenId*

transfertokenIdq
mapinto_another_thing"
map_something_elseAnotherThing*2
0
things&
$""
AnotherThing
thingsthings:S
SomethingElse[]AnotherThing*2
0
things&
$""
AnotherThing
thingsthings:Ÿ
Erc721.TransferSomethingElse*}
{
transfero
m"k
SomethingElse
from*

transferfrom
to*

transferto"
tokenId*

transfertokenId
@
SomethingElse
fromaddress
toaddress
tokenIduint
)
AnotherThing
thingsSomethingElse[]"½[{"type":"event","name":"PoolCreated","inputs":[{"type":"address","name":"token0","indexed":true},{"type":"address","name":"token1","indexed":true},{"type":"uint24","name":"fee","indexed":true},{"type":"int24","name":"tickSpacing","indexed":false},{"type":"address","name":"pool","indexed":false}],"anonymous":false}]BErc721.TransferBSomethingElse* syntax = "proto3";

package streamline_test.Erc721;

message PoolCreated{
string token0 = 1;
string token1 = 2;
string fee = 3;
string tickSpacing = 4;
string pool = 5;
}

message Events {
repeated PoolCreated pool_created = 1;
}



message TransferArray{
repeated Transfer values = 1;
}
*ƒsyntax = "proto3";

package streamline_test.structs;

message SomethingElse{
string from = 1;
string to = 2;
string tokenId = 3;
}

message SomethingElseArray{
repeated SomethingElse values = 1;
}

message AnotherThing{
repeated SomethingElse things = 1;
}


À
Erc721½[{"type":"event","name":"PoolCreated","inputs":[{"type":"address","name":"token0","indexed":true},{"type":"address","name":"token1","indexed":true},{"type":"uint24","name":"fee","indexed":true},{"type":"int24","name":"tickSpacing","indexed":false},{"type":"address","name":"pool","indexed":false}],"anonymous":false}]v
eventPoolCreated
addresstoken0
addresstoken1
uint24fee
int24tickSpacing
addresspoolJ
streamline_test