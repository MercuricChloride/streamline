stream sushiswapTest;

interface Sushi {
    event PoolCreated(
        address indexed token0,
        address indexed token1,
        uint24 indexed fee,
        int24 tickSpacing,
        address pool
    );
}

interface SomethingElse {
    event Transfer(address from, address to, address tokenId);
}

struct Pools {
     address token0;
     address token1;
}

mfn pools_created:
(Sushi.PoolCreated[]) -> Pools[] {
    map (p) => Pools {
        token0: p.token0,
        token1: p.token1,
    };
}


struct AnotherOne {
    address djKhalid;
}

mfn something_else:
(Sushi.PoolCreated[]) -> AnotherOne[] {
    map (p) => AnotherOne {
        djKhalid: p.token0,
    };
}

struct EntityChange {
    string entity;
    string id;
    string operation;
    Field[] fields;
}

struct Field {
    string name;
    string value;
}

convert:
Pool[] -> EntityChange[] {
    map (p) => EntityChange {
        entity: "Pools",
        id: p.token0,
        operation: "CREATE",
        fields: [
                Field {
                      name: "token_a",
                      value: p.token0
                 },
                Field {
                      name: "token_b",
                      value: p.token1
                 },
        ]
    };
}

mfn changes:
(pools_created, something_else) -> EntityChange[] {
    map (p, s) => EntityChange {
        entity: "Pools",
        id: p.token0,
        operation: "CREATE",
        fields: [
                Field {
                      name: "token_a",
                      value: p.token0
                 },
                Field {
                      name: "token_b",
                      value: p.token1
                 },
        ]
    };
}
