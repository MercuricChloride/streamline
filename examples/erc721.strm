stream minimal_erc721;

interface Erc721 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);
}

fn double_num:
(uint) -> uint {
       (a) => a * 2;
       (a) => a * 2;
       (a) => a * 2;
}

struct SomethingElse {
       address foo;
}

struct Burn {
       address burner;
       uint256 token;
       SomethingElse bar;
       Erc721.Transfer foo;
}

convert:
Erc721.Transfer -> Burn {
    (transfer) => Burn {
                        burner: transfer.from,
                        token: transfer.tokenId,
                      };
}

mfn burns:
(Erc721.Transfer[]) -> Burn[] {
    filter (transfer) => transfer.to != address(0);
    map (transfer) => convert(transfer, Burn);
}

mfn something_else:
(burns) -> Burn[] {
        (burns) => burns;
}
