syntax = "proto3";

package spyglass.streamline.alpha.ast;

message StreamlineFile {
    repeated TypeDeclaration types = 1;
    repeated ContractAbi contracts = 2;
    repeated ModuleDef modules = 3;
}

message ContractAbi {
    string name = 1;
    repeated EventAbi events = 2;
    repeated FunctionAbi functions = 3;
}

message EventAbi {
    string type = 1; // always "event"
    string name = 2;
    repeated EventInput inputs = 3;
}

message EventInput {
    string type = 1;
    string name = 2;
    bool indexed = 3;
    //optional Components components = 4;
}

message FunctionAbi {
    string type = 1; // always "function"
    string name = 2;
    repeated FunctionInput inputs = 3;
    repeated FunctionInput outputs = 4;
    string state_mutability = 5;
}

message FunctionInput {
    string name = 1;
    string type = 2;
    //optional Components components = 4;
}

message ContractFunctionParameter {
    string name = 1;
    string type = 2;
}

message TypeDeclaration {
    string name = 1;
    repeated TypeField fields = 2;
}

message TypeField {
    string field_name = 1;
    string field_type = 2;
}

message ModuleDef {
    string kind = 1;
    string identifier = 2;
    ModuleSignature signature = 3;
    repeated Function pipeline = 5;
}

message ModuleSignature {
    repeated string  inputs = 1;
    string output = 2;
}


message Function {
    oneof function {
        Lambda lambda = 1;
        Hof hof = 2;
    }
}

message Lambda {
    repeated string inputs = 1;
    Expression body = 2; // TODO Make this a proper list of expressions
}

message Hof {
    string parent = 1;
    repeated string inputs = 2;
    Expression body = 3; // TODO Make this a proper list of expressions
}

message Expression {
    oneof expression {
        Literal literal = 1;
        string identifier = 2;
        FunctionCall function_call = 3;
        BinaryOp binary_op = 4;
        FieldAccess field_access = 5;
    }
}

message Literal {
    oneof literal {
        int64 int = 1;
        string str = 2;
        bool boolean = 3;
    }
}

message FunctionCall {
    string identifier = 1;
    repeated Expression arguments = 2;
}

message BinaryOp {
    string op = 1;
}

message FieldAccess {
    Expression target = 1;
    string field = 2;
}
