;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package sf.substreams
;;;----------------------------------------------------------------------------------
(ns sf.substreams
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->FieldOptions)
(declare ecis->FieldOptions)
(declare new-FieldOptions)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; FieldOptions
;-----------------------------------------------------------------------------
(defrecord FieldOptions-record [load-from-file zip-from-folder]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Bool 1  {:optimize true} (:load-from-file this) os)
    (serdes.core/write-Bool 2  {:optimize true} (:zip-from-folder this) os))
  pb/TypeReflection
  (gettype [this]
    "sf.substreams.FieldOptions"))

(s/def :sf.substreams.FieldOptions/load-from-file boolean?)
(s/def :sf.substreams.FieldOptions/zip-from-folder boolean?)
(s/def ::FieldOptions-spec (s/keys :opt-un [:sf.substreams.FieldOptions/load-from-file :sf.substreams.FieldOptions/zip-from-folder ]))
(def FieldOptions-defaults {:load-from-file false :zip-from-folder false })

(defn cis->FieldOptions
  "CodedInputStream to FieldOptions"
  [is]
  (->> (tag-map FieldOptions-defaults
         (fn [tag index]
             (case index
               1 [:load-from-file (serdes.core/cis->Bool is)]
               2 [:zip-from-folder (serdes.core/cis->Bool is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->FieldOptions-record)))

(defn ecis->FieldOptions
  "Embedded CodedInputStream to FieldOptions"
  [is]
  (serdes.core/cis->embedded cis->FieldOptions is))

(defn new-FieldOptions
  "Creates a new instance from a map, similar to map->FieldOptions except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::FieldOptions-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::FieldOptions-spec init))))]}
  (-> (merge FieldOptions-defaults init)
      (map->FieldOptions-record)))

(defn pb->FieldOptions
  "Protobuf to FieldOptions"
  [input]
  (cis->FieldOptions (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record FieldOptions-meta {:type "sf.substreams.FieldOptions" :decoder pb->FieldOptions})

