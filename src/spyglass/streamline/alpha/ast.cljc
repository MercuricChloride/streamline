;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package spyglass.streamline.alpha.ast
;;;----------------------------------------------------------------------------------
(ns spyglass.streamline.alpha.ast
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->ModuleDef)
(declare ecis->ModuleDef)
(declare new-ModuleDef)
(declare cis->Lambda)
(declare ecis->Lambda)
(declare new-Lambda)
(declare cis->Function_Application)
(declare ecis->Function_Application)
(declare new-Function_Application)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Lambda--parent-function's oneof Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(defn convert-Lambda--parent-function [origkeyval]
  (cond
     (get-in origkeyval [:-parent-function :parent-function]) origkeyval
     :default origkeyval))

(defn write-Lambda--parent-function [-parent-function os]
  (let [field (first -parent-function)
        k (when-not (nil? field) (key field))
        v (when-not (nil? field) (val field))]
     (case k
         :parent-function (serdes.core/write-String 1  {:optimize false} v os)
         nil)))



;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; ModuleDef
;-----------------------------------------------------------------------------
(defrecord ModuleDef-record [module-kind module-name module-inputs module-output module-body]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:module-kind this) os)
    (serdes.core/write-String 2  {:optimize true} (:module-name this) os)
    (serdes.complex/write-repeated serdes.core/write-String 3 (:module-inputs this) os)
    (serdes.core/write-String 4  {:optimize true} (:module-output this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 5 (:module-body this) os))
  pb/TypeReflection
  (gettype [this]
    "spyglass.streamline.alpha.ast.ModuleDef"))

(s/def :spyglass.streamline.alpha.ast.ModuleDef/module-kind string?)
(s/def :spyglass.streamline.alpha.ast.ModuleDef/module-name string?)
(s/def :spyglass.streamline.alpha.ast.ModuleDef/module-inputs (s/every string?))
(s/def :spyglass.streamline.alpha.ast.ModuleDef/module-output string?)

(s/def ::ModuleDef-spec (s/keys :opt-un [:spyglass.streamline.alpha.ast.ModuleDef/module-kind :spyglass.streamline.alpha.ast.ModuleDef/module-name :spyglass.streamline.alpha.ast.ModuleDef/module-inputs :spyglass.streamline.alpha.ast.ModuleDef/module-output ]))
(def ModuleDef-defaults {:module-kind "" :module-name "" :module-inputs [] :module-output "" :module-body [] })

(defn cis->ModuleDef
  "CodedInputStream to ModuleDef"
  [is]
  (->> (tag-map ModuleDef-defaults
         (fn [tag index]
             (case index
               1 [:module-kind (serdes.core/cis->String is)]
               2 [:module-name (serdes.core/cis->String is)]
               3 [:module-inputs (serdes.complex/cis->repeated serdes.core/cis->String is)]
               4 [:module-output (serdes.core/cis->String is)]
               5 [:module-body (serdes.complex/cis->repeated ecis->Lambda is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ModuleDef-record)))

(defn ecis->ModuleDef
  "Embedded CodedInputStream to ModuleDef"
  [is]
  (serdes.core/cis->embedded cis->ModuleDef is))

(defn new-ModuleDef
  "Creates a new instance from a map, similar to map->ModuleDef except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ModuleDef-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ModuleDef-spec init))))]}
  (-> (merge ModuleDef-defaults init)
      (cond-> (some? (get init :module-body)) (update :module-body #(map new-Lambda %)))
      (map->ModuleDef-record)))

(defn pb->ModuleDef
  "Protobuf to ModuleDef"
  [input]
  (cis->ModuleDef (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ModuleDef-meta {:type "spyglass.streamline.alpha.ast.ModuleDef" :decoder pb->ModuleDef})

;-----------------------------------------------------------------------------
; Lambda
;-----------------------------------------------------------------------------
(defrecord Lambda-record [-parent-function inputs body]
  pb/Writer
  (serialize [this os]
    (write-Lambda--parent-function  (:-parent-function this) os)
    (serdes.complex/write-repeated serdes.core/write-String 2 (:inputs this) os)
    (serdes.complex/write-repeated serdes.core/write-embedded 3 (:body this) os))
  pb/TypeReflection
  (gettype [this]
    "spyglass.streamline.alpha.ast.Lambda"))

(s/def :spyglass.streamline.alpha.ast.Lambda/inputs (s/every string?))

(s/def ::Lambda-spec (s/keys :opt-un [:spyglass.streamline.alpha.ast.Lambda/inputs ]))
(def Lambda-defaults {:inputs [] :body [] })

(defn cis->Lambda
  "CodedInputStream to Lambda"
  [is]
  (->> (tag-map Lambda-defaults
         (fn [tag index]
             (case index
               1 [:-parent-function {:parent-function (serdes.core/cis->String is)}]
               2 [:inputs (serdes.complex/cis->repeated serdes.core/cis->String is)]
               3 [:body (serdes.complex/cis->repeated ecis->Function_Application is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Lambda-record)))

(defn ecis->Lambda
  "Embedded CodedInputStream to Lambda"
  [is]
  (serdes.core/cis->embedded cis->Lambda is))

(defn new-Lambda
  "Creates a new instance from a map, similar to map->Lambda except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Lambda-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Lambda-spec init))))]}
  (-> (merge Lambda-defaults init)
      (cond-> (some? (get init :body)) (update :body #(map new-Function_Application %)))
      (convert-Lambda--parent-function)
      (map->Lambda-record)))

(defn pb->Lambda
  "Protobuf to Lambda"
  [input]
  (cis->Lambda (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Lambda-meta {:type "spyglass.streamline.alpha.ast.Lambda" :decoder pb->Lambda})

;-----------------------------------------------------------------------------
; Function_Application
;-----------------------------------------------------------------------------
(defrecord Function_Application-record [function-name arguments]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:function-name this) os)
    (serdes.complex/write-repeated serdes.core/write-String 2 (:arguments this) os))
  pb/TypeReflection
  (gettype [this]
    "spyglass.streamline.alpha.ast.Function_Application"))

(s/def :spyglass.streamline.alpha.ast.Function_Application/function-name string?)
(s/def :spyglass.streamline.alpha.ast.Function_Application/arguments (s/every string?))
(s/def ::Function_Application-spec (s/keys :opt-un [:spyglass.streamline.alpha.ast.Function_Application/function-name :spyglass.streamline.alpha.ast.Function_Application/arguments ]))
(def Function_Application-defaults {:function-name "" :arguments [] })

(defn cis->Function_Application
  "CodedInputStream to Function_Application"
  [is]
  (->> (tag-map Function_Application-defaults
         (fn [tag index]
             (case index
               1 [:function-name (serdes.core/cis->String is)]
               2 [:arguments (serdes.complex/cis->repeated serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Function_Application-record)))

(defn ecis->Function_Application
  "Embedded CodedInputStream to Function_Application"
  [is]
  (serdes.core/cis->embedded cis->Function_Application is))

(defn new-Function_Application
  "Creates a new instance from a map, similar to map->Function_Application except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Function_Application-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Function_Application-spec init))))]}
  (-> (merge Function_Application-defaults init)
      (map->Function_Application-record)))

(defn pb->Function_Application
  "Protobuf to Function_Application"
  [input]
  (cis->Function_Application (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Function_Application-meta {:type "spyglass.streamline.alpha.ast.Function_Application" :decoder pb->Function_Application})

